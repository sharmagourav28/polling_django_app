your project location should be inside 

	C:\Users\Nitin\PycharmProjects



main location of "site-packages" where all libraries are by default downloaded is:


"C:\Users\Nitin\AppData\Local\Programs\Python\Python310\Lib\site-packages"


if you have installed a package and still you get package not found error, always select "existing" as an option and select interpreter from 

"C:\Users\Sriram\AppData\Local\Programs\Python\Python310\python.exe"

How to create virtual environment?

pip install virtualenv

[ virtualenv is used to manage Python packages for different projects. Using virtualenv allows you to avoid installing Python packages globally which could break system tools or other projects.]



pip install virtualenv



if you want to create a virtual environment , go to your project location on the terminal and type:

C:\Users\nitin\PycharmProjects> python -m venv myenv

	this command will create "myenv" folder inside "C:\Users\Sriram\PycharmProjects"
	inside "myenv" folder you will get
		"Lib\site-packages"
	this "site-packages" is the folder where your environment (myenv) specific packages only will be stored. 
i.e. [C:\Users\nitin\PycharmProjects\myenv\Lib\site-packages]

so, the "site-packages" folder which is available to all the projects
	i.e.
	C:\Users\nitin\AppData\Local\Programs\Python\Python310\Lib\site-packages

is different and "site-packages" which is specific to a particular virtual environment  i.e.
	C:\Users\nitin\PycharmProjects\myenv\Lib\site-packages



if you want to list out the packages installed for your project, go to your project folder on the terminal and give following command

C:\Users\Sriram\PycharmProjects>pip list

it will list out all the packages which have been installed globally.


now if you want to activate your virtual environment, give following command

C:\Users\nitin\PycharmProjects> cd myenv
it will change to 
C:\Users\nitin\PycharmProjects\myenv>

now give command
C:\Users\nitin\PycharmProjects\myenv> Scripts\activate

make sure command prompt changes to :

(myenv) C:\Users\nitin\PycharmProjects\myenv>
	this means that we've activated "myenv" virtual environment

now list out how many packages have been installed inside your virtual environment (myenv)

(myenv) C:\Users\Sriram\PycharmProjects\myenv> pip list

to deactivate the virtual environment give command
	deactivate



IF YOU GET ERROR 
scripts\activate  (to activate the environment)
	this command by default will give you error

"cannot be loaded because running scripts is disabled on this system"

to solve this error,

 E:\work\myenv> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted -Force
E:\work\myenv> scripts\activate

 make sure you can see following:
(myenv) PS E:\work\myenv> 




First install "virtualenv" if you haven't installed before.


go to the command prompt and give following command:

	pip install virtualenv

make sure it is installed successfully

"virtualenv" is used to create your virtual environment.



Create virtual environment

go to the folder where you want to create virtual environment

e.g. in my case it is
e:\\temp

give following command :

e:\temp>virtualenv myenv (to create virtual environment)

here "myenv" is the name of virtual environment to be created inside "temp" folder.
check inside "temp" directory whether "myenv" folder has been created or not

go to pycharm and close your currently running project.

restart pycharm

click on "New Project" button

	from "Location", select
			E:\temp\myenv

from the available radio buttons , select
	New Environment Using - Virtualenv

don't select "Create main.py welcome script"

	click on "Create" button to create the project.

if you get "Directory is not empty" dialog box,
	click on "Create from existing Sources" button

make sure it creates a project successfully.

now click on "Terminal" tab from the bottom window

change the directory to 
	e:\\temp\\myenv

now let's install Django 4.2 inside our virtual environment. In order to do that first we have to activate our virtual environment

To install any library (like Django) into a virtual environment, you must first activate that environment. This ensures that the library is installed specifically in that isolated environment, avoiding conflicts with other projects or the global installation.

now let's activate (myenv) our virtual environment

e:\temp\myenv>  scripts\activate  (to activate the environment)
	if this command gives you error"

	"cannot be loaded because running scripts is disabled on this system"

to solve this error,give following command :

 e:\temp\myenv> Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted -Force

and then try again
	e:\temp\myenv> scripts\activate

make sure you can see following:
(myenv) PS e:\temp\myenv> 

Once the virtual environment is activated, the name of your virtual environment ("myenv" in our case)will appear on the left side of the terminal. This will let you know that the virtual environment is currently active.


once virtual environment gets activated, install Django 4.2 by giving following command

(myenv) PS e:\temp\myenv>pip install Django==4.2

it will take some time. make sure Django 4.2 is installed successfully inside myenv

now check again with "pip list" command :

(myenv) PS e:\temp\myenv> pip list

this time you will notice "Django 4.2" inside myenv folder.



now let's create a Django project 
create a project:

(myenv) PS e:\temp\myenv> django-admin startproject myproject

notice on the left side project view, "myproject" gets created inside "myenv"


make sure "myproject" project has been created inside "myenv" ( this can be checked inside VS code itself)

now inside this "myproject" we'll create our first app or application. One application atleast is required.

go to "myproject"

(myenv) PS E:\work\myenv> cd myproject
(myenv) PS E:\work\myenv\myproject> 

now create app inside this

(myenv) PS E:\work\myenv\myproject> django-admin startapp firstapp

make sure inside "myproject", "firstapp" gets created



right click on "firstapp"
	new python file
		urls.py

blank "urls.py" file will get created. Now copy the contents of "urls.py" file from "myproject" folder and paste it in "urls.py" of "firstapp" project.

inside "urlpatterns" of "urls.py" file of "firstapp" 

path=
	which has got 3 parameters
	1) the endpoint of the page
		if it is blank that means we want to display "Hello World" on the home page itself.
	2) on the execution of the app, which function should be called
		e.g. if you mention "views.home"
	it means definition of "home" function you will provide in "views.py" file.

if you get error for "views" ,
	from . import views

	3) name 
		which is name of page e.g.  home page

so , your "urls.py" inside "firstapp" should look like

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',views.home,name='home page')
]


let's go to "views.py" and define "home" function

contents of "views.py" file:

from django.shortcuts import render
from django.http import HttpResponse

# Create your views here.

def home(request):
    return HttpResponse("Welcome to first Django app")



now project "myproject" within which we have "firstapp", should know that we've created url.

so open "urls.py" of "myproject" and include the url we have given inside "urls.py" of "firstapp"

so "urls.py" of "myproject" should look like:

from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',include('firstapp.urls'))
]


now start the server

on pycharm terminal go to "e:\temp\myenv\myproject>" and type the following command:

python manage.py runserver

make sure you get following message:

	Django version 4.2, using settings 'a.settings'
Starting development server at http://127.0.0.1:8000/


click this link and make sure you get following message in the browser:

	Welcome to first Django app



<---- ORM with Database--->
Add the name of the newly created app home to the INSTALLED_APPS list in settings.py.

myproject/settings.py

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'firstapp',
]



Design Model

A Model is basically a design for the database. Here, we will create a model for a simple database of employees. This is specified in the "models.py" file inside "firstapp".


from django.db import models

#must to be derived from models
class Employee(models.Model):  # has to be derived from "Model"
    name = models.CharField(max_length=250) # charfield is class 
    department = models.CharField(max_length=250)

    def __str__(self):
        return self.name+"    "+self.department




By default Django uses "SQLite" database. You can check it by opening "settings.py" file:


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

But we can make Django use other database as a default database e.g. MySQL. For that first you need to 

install mysqlclient package

Before installing the mysqlclient package, let's understand what mysqlclient is and why we use. The mysqlclient is the Python interface to MySQL that allows Python project to connect to the MySQL server.

So it is necessary to install mysqlclient package to establish the connection between the MySQL and Django. To install, use the following command in the working directory.

pip install mysqlclient  

now you need to replace the above "DATABASES" section like this:


DATABASES = {  
    'default': {  
        'ENGINE': 'django.db.backends.mysql',  
        'NAME': 'pythondb1',  
        'USER': 'root',  
        'PASSWORD': 'root',  
        'HOST': '127.0.0.1',  
        'PORT': '3306',  
        'OPTIONS': {  
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"  
        }  
    }  
}  


Now, run this command

(myenv) PS E:\work\myenv\myproject> python manage.py makemigrations firstapp


You should get a similar output

migrations for "firstapp"
	firstapp/migrations/000_1/initial.py
		create model Employee

(myenv) PS E:\work\myenv\myproject>



The makemigrations command tells Django that some changes have been made to the specified model and to store the changes as a migration. A migration is how Django stores changes in the models and thus the database schema. Also, file is created home/migrations/0001_initial.py, where you can check the stored changes. You are not required to read this every time as it is just a reference to the changes that will be made, although you can edit them in case you want the manually make some changes.

You can try running this command to see the SQL query required to create the changes specified by the migrations to the database mentioned in the project settings.

give following command:

python manage.py sqlmigrate firstapp 0001

you'll get the output:

CREATE TABLE `firstapp_employee` (`id` bigint AUTO_INCREMENT NOT NULL PRIMARY KEY, `name` varchar(250) NOT NULL, `department` varchar(250) NOT NULL);


Also, one is not supposed to run this command every time. It is just to see SQL command for the migration file.


Migrate

Next, run the migrate command to actually make changes in the database ie. apply the migrations.

give following command:

python manage.py migrate


The migrate command creates any necessary database tables for all the apps listed in the INSTALLED_APPS setting as per the database settings mentioned in the settings.py file. 

make sure above "python manage.py migrate" command works successfully.


Entering Data

Django Shell

Django provides a free API using which one can use the interactive python shell and explore the Database API.

Invoke the python shell using this command:

python manage.py shell

	Once inside the shell, we can read the data and enter/edit data as well.


>>> from firstapp.models import Employee
>>> Employee.objects.all()
<QuerySet []>
>>> e1 = Employee(name="Rohit", department="accounts")
>>> e1.save()
>>> Employee.objects.all()   # it will show you one record
>>> exit()



Django Admin

Django has its own inbuilt admin interface that helps the site managers, staff, clients to manage the data on the website. This is not intended to be used by the site visitors.

First, create a user who can log in to the admin site using this command. Then enter the desired username, email and password. For testing purposes, one can use a dummy mail too.


give the following command:

python manage.py createsuperuser


Username (leave blank to use 'sriram'): admin
Email address: nitin.javastudent@gmail.com
Password:
Password (again):
Superuser created successfully.


Now, start the development server using the command.

python manage.py runserver



Then, navigate to the local domain of the django admin site on a web browser, ie. http://localhost:8000/admin/ and you should see the admin’s login screen.


Enter the username and password entered while creating the superuser and then you should see the Django admin index page.


But, we cannot see our Employee data here.

For that, we need to register our Employee objects with the admin interface. Edit the firstapp/admin.py file as follows.

firstapp/admin.py


from django.contrib import admin
from .models import Employee

admin.site.register(Employee)



On saving the file, the server will reload automatically and now we can see our Employee data in the admin interface.


Create Template

Next, create an HTML template to view the data as a site visitor. Create appropriate folders and add this to



E:\work\myenv\myproject\templates\firstapp
					index.html


<!DOCTYPE html>

<head>
    <title>Employee Database</title>
</head>

<body>
    <h2>Employee Database</h2>

    {% if employee_list %}
    <ul>
        {% for employee in employee_list %}
        <li> <b> {{employee.name}} </b> | {{employee.department}} </li>
        {% endfor %}
    </ul>
    {% else %}
    <p>No employee entered in the database. </p>
    {% endif %}
</body>

</html>



Views and URLs

Next, create a view in firstapp/views.py to show the data in the database to the user.



from django.shortcuts import render
from .models import Employee


def index(request):
    employee_list = Employee.objects.all()
    context = {'employee_list': employee_list}
    return render(request, 'firstapp/index.html', context=context)




Here, we fetch all the objects and pass them to the context. The context is a dictionary mapping template variable names to Python objects.

Create a file firstapp/urls.py with the following content:

from django.contrib import admin
from django.urls import path
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('',views.index,name="index page")
]



inside "myproject/urls.py"


from django.contrib import admin
from django.urls import path,include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('firstapp.urls'))
]


Now start the server using python manage.py runserver and we can see our data as per the format specified in the template.